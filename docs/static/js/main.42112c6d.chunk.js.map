{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","components/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","console","log","target","getGifs","category","a","URL","encodeURI","fetch","then","res","json","res_data","data","gifs","map","item","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","resp","setTimeout","useFetchGifs","img","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAehD,OACE,mCACE,sBAAMC,SAVW,SAACC,GACpBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAO,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAKd,SACE,uBAAOO,KAAK,OACJC,YAAY,kBACZC,MAAOV,EACPW,SAlBY,SAACR,GAEzB,OADAS,QAAQC,IAAIV,EAAEW,OAAOJ,OACdT,EAAcE,EAAEW,OAAOJ,e,+BCPrBK,EAAO,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEAI,MAAMF,GACxBG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAQ,OAAIA,EAASC,QAJR,cAEbA,EAFa,OAMbC,EAAOD,EAAKE,KAAK,SAAAC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MACZC,IAAG,UAAEH,EAAKI,cAAP,aAAE,EAAaC,iBAAiBF,QAVpB,kBAaZL,GAbY,2CAAH,sDCCPQ,EAAc,SAAC,GAAsB,IAApBL,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,MAAMC,EAAU,EAAVA,IAErC,OADAnB,QAAQC,IAAI,CAACgB,KAAGC,QAAMC,QAEpB,sBAAKI,UAAU,yCAAf,UACE,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,QCFGQ,EAAU,SAAC,GAAgB,IAAftB,EAAc,EAAdA,SAAc,ECFX,SAAEA,GAAc,IAAD,EACfjB,mBAAS,CACjC0B,KAAM,GACNc,SAAS,IAH8B,mBAClCC,EADkC,KAC3BC,EAD2B,KAyBzC,OAnBAC,qBAAU,WACR3B,EAAQC,GACPK,MAAK,SAAAsB,GACJC,YAAW,WACTH,EAAS,CACLhB,KAAMkB,EACNJ,SAAQ,MAEX,UAEL,CAACvB,IASIwB,EDrBuBK,CAAa7B,GAA/BgB,EAFyB,EAE9BP,KAAYc,EAFkB,EAElBA,QAcnB,OADA3B,QAAQC,IAAImB,GAEV,qCACE,6BAAKhB,IACHuB,GAAW,oBAAIJ,UAAU,mCAAd,qBACb,qBAAKA,UAAU,YAAf,SAEEH,EAAOL,KAAI,SAAAmB,GAAG,OACZ,cAAC,EAAD,eAA8BA,GAAZA,EAAIjB,aEAjBkB,EAxBM,SAAAC,GAAS,MAEQjD,mBAAS,CAAC,cAFlB,mBAErBkD,EAFqB,KAETnD,EAFS,KAQ5B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEEmD,EAAWtB,KAAK,SAAAX,GAAQ,OACtB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCfxBkC,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.42112c6d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  //* El estado tiene que inicializarse con algun valor y no debe estar vacio para evitar el undefined y el cambio de estado al enviar valores del input\r\n  const [inputValue, setInputValue] = useState('');\r\n  const handleInputChange = (e) =>{\r\n    console.log(e.target.value);\r\n    return setInputValue(e.target.value)\r\n  }\r\n  const handleSubmit = (e) =>{\r\n    e.preventDefault(); //Prevent behavior of form\r\n    //Delete blank spaces b4 and after\r\n    if ( inputValue.trim().length>2){\r\n      setCategories(cats => [inputValue,...cats]);\r\n      setInputValue(''); //For cleaning input tag\r\n    }\r\n  }\r\n  return (\r\n    <> \r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" \r\n                placeholder=\"Insert Category\" \r\n                value={inputValue} \r\n                onChange={handleInputChange}/>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async(category) =>{\r\n  const URL = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ZbxJPganIx2wCWkxqGh7XxDuaGbt1rgD`;\r\n    const data = await fetch(URL)\r\n    .then(res => res.json())\r\n    .then(res_data => res_data.data)\r\n    \r\n    const gifs = data.map( item => {\r\n      return {\r\n        id: item.id,\r\n        title: item.title,\r\n        url: item.images?.downsized_medium.url //if there are images, it returns url\r\n      }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id,title,url} ) => {\r\n  console.log({id,title,url});\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title}/>\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n  const {data:images,loading} = useFetchGifs(category);\r\n  // const [images, setImages] = useState([]);\r\n\r\n  //const [count, setCount] = useState(0);\r\n  //* La funcion solo se va disparar una sola vez gracias al useEffect\r\n  //* Solo se ejecuta la funcion cuando el componente es renderizado una vez\r\n  // useEffect(()=>{\r\n  //   getGifs(category)\r\n  //   // .then(resp => setImages(resp)) \r\n  //   .then(setImages);\r\n  // },[category]); //Si categoria hace un cambia, se vuelve a ejecutar el efecto\r\n  // const {data,loading} = useFetchGifs();\r\n  // console.log(loading,data);\r\n  console.log(images);\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      { loading && <h1 className=\"animate__animated animate__flash\">Loading</h1> }\r\n      <div className=\"card-grid\">\r\n        {\r\n        images.map(img => (\r\n          <GifGridItem key={img.id} {...img}/>\r\n        ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs';\r\n//Hook\r\nexport const useFetchGifs = ( category ) =>{\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n  useEffect(()=>{\r\n    getGifs(category)\r\n    .then(resp => {\r\n      setTimeout(() => {\r\n        setState({\r\n            data: resp,\r\n            loading:false\r\n        })\r\n      }, 500)\r\n    });\r\n  },[category]) //Se dispara el efecto cuando la categoria cambia\r\n\r\n  // setTimeout(() => {\r\n  //   setState({\r\n  //     data: [1,2,3,4],\r\n  //     loading: false\r\n  //   })\r\n  // }, 3000);\r\n\r\n  return state; //{ data:[], loading,true}\r\n}\r\n//* Functional Component, regresa jsx\r\n// export const useFetchGifs = () =>{\r\n//   return(\r\n//     <div>\r\n\r\n//     </div>\r\n//   )\r\n// }","import React, { useState } from 'react'\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nconst GifExpertApp = props => {\r\n  //const categories = ['One Punch','Samurai X','Dragon Ball'];\r\n  const [categories, setCategories] = useState(['One Punch']);\r\n  // const handleAdd = () =>{\r\n  //   setCategories([...categories,'The Flash']);\r\n  //   //* Valor de estado anterior + Nuevo estado\r\n  //   setCategories(cats => [...cats,'The Flash']);\r\n  // }\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={ setCategories }/>\r\n      <hr/>\r\n      <ol>\r\n        {\r\n        categories.map( category => (\r\n          <GifGrid key={category} category={category}/>\r\n        ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp';\n\nReactDOM.render(<GifExpertApp />,document.getElementById('root'));\n"],"sourceRoot":""}